class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        explored = set()
        res = 0
        def dfs(r,c ,explored):
            cell = (r,c)
            #check if the cell were at is out of bounds, is water, 
            if r < 0 or r == len(grid) \
            or c < 0 or c == len(grid[r]) or grid[r][c] == "0" or cell in explored:
                return None
            explored.add(cell)
            dfs(r-1,c, explored)
            dfs(r+1,c, explored)
            dfs(r,c-1, explored)
            dfs(r,c+1, explored)


        for r in range(len(grid)):
            for c in range(len(grid[r])):
                land = (r,c)
                if grid[r][c] == "1" and land not in explored:
                    dfs(r, c, explored)
                    res += 1
        return res
        '''
        graph = {}
        e = set()
        vertices = set()
        for row in range(len(grid)):
            graph[row] = []
            vertices.add(row)
            for c in range(len(grid[row])):
                #c = int(column)
                if grid[row][c] == "1":
                    graph[row].append(c)
        
        def explore(g, v, e):
            e.add(v)
            for neighbor in graph[v]:
                if neighbor not in e:
                    explore(g, neighbor, e)
            
        def dfs(g, v, e):
            res = 0
            for vertex in v:
                if vertex not in e:
                    explore(g, vertex, e)
                    res += 1
            return res
        
        print(graph)
        print(vertices)
        return dfs(graph, vertices, e)

        P:
        - lands are connecting horizontally (c - 1, c + 1) or vert (r + 1, r -1)
        - cells are type string not int!!

        I:
        - Question of reachibility + find number of components = DFS + explore!!
        A:
        - find a peace of land and begin dfs here:
        - go to valid neighbors inside grid (make sure to add nieghbors to explore set)
        - do so until you each end of grid (m, n)
        T: O(n^2) 
        '''



'''
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        def dfs(grid, i, j):
            #the base cases where traversal should stop
            if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == '0':
                return
            # mark the element as visited so that it won't be taken into account if visited again
            grid[i][j] = '0'
            #DFS for up element
            dfs(grid,i-1,j);
            #DFS for down element
            dfs(grid,i+1,j); 
            #DFS for left element
            dfs(grid,i,j-1);
            #DFS for right element
            dfs(grid,i,j+1);  
        
        if not grid or len(grid) == 0:
            return 0
        
        count = 0
        
        # traverse the grid elements one by one
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                # if a grid element is '1', increment the count and do dfs on adjacent cells.
                if grid[i][j] == '1':
                    dfs(grid, i, j)
                    count += 1
        
        return count
'''
