class Solution:
    def checkValidString(self, s: str) -> bool:
        open_count = 0
        close_count = 0
        length = len(s) - 1
        
        # Traverse the string from both ends simultaneously
        for i in range(length + 1):
            # Count open parentheses or asterisks
            if s[i] == '(' or s[i] == '*':
                open_count += 1
            else:
                open_count -= 1
            
            # Count close parentheses or asterisks
            if s[length - i] == ')' or s[length - i] == '*':
                close_count += 1
            else:
                close_count -= 1
            
            # If at any point open count or close count goes negative, the string is invalid
            if open_count < 0 or close_count < 0:
                return False
        
        # If open count and close count are both non-negative, the string is valid
        return True

'''
Learned: Valid = two pointer
keep track of open/closed brack count of the whole string (makes sense)
think of edge case false at the start!!!
class Solution:
    def checkValidString(self, s: str) -> bool:
        
        Note:
        * = ( or ) or ""
        Intuition:
        valid = left and right pointer
        Approach
        left = 0, right len(s)
        make sure they match according to valid rules
        if left + 1 = right stop
        
        TIme
        
        left = 0
        right = len(s) - 1
        while left < right:
            print(s[left])
            print(s[right])
            if s[right] == '(':
                return False
            elif s[right] == ')' and ((s[left] != '(') and (s[left] != '*')):
                return False
            left += 1
            right -= 1
        
        if left == right and s[left] != "*":
            return False
        return True  
'''
        
