class Solution:
    def explore(self, graph, v, explored):
        explored.add(v)
        for neighbor in graph[v]:
            if neighbor not in explored:
                self.explore(graph, neighbor, explored)


    def dfs(self, graph, vertices, explored):
        count = 0
        for v in vertices:
            if v not in explored:
                self.explore(graph, v, explored)
                count += 1
        return count
    
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        '''
        Intuition:
        Find number of connected components = DFS!!!
        1. Create good graph representation = dictionary
        '''
        graph = {}
        vertices = set()
        for i in range(len(isConnected)):
            graph[i] = []
            vertices.add(i)
            for j in range(len(isConnected[i])):
                if isConnected[i][j] == 1: #and isConnected[i][i] != isConnected[i][j]:
                    graph[i].append(j)
        print(graph)
        print(vertices)
        explored = set()
        return self.dfs(graph, vertices, explored)
