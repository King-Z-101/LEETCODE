class Solution:
    def customSortString(self, order: str, s: str) -> str:
        '''
        I: string order with unique chars, uniquely sorted
        O: string that matches the unqiue sort of order (sort s based off order's sorting)
        EX: o = cba, s = abcd
        O: cbad
        Pseudo:
        Hashtable for s' characters (char: freq)
        go through string order, if character in order is in hashtable, add it to result string 
        - continue until ht[char] == 0 to indicate that all char instance in s 
        have already been added to the result string before moving to next char in order
        after goign through order, any remain keys where ht[char] != 0 should be added to end of result string
        by value times
        '''
        sHashTable = {}
        for element in s:
            if element not in sHashTable:
                sHashTable[element] = 1
            else:
                sHashTable[element] += 1
        print(sHashTable)
        result = ""
        for element in order:
            if element in sHashTable.keys():
                freq = sHashTable.get(element)
                for i in range(freq):
                    result += element
                sHashTable[element] = 0
        print(sHashTable)
        for element in sHashTable.keys():
            if sHashTable[element] != 0:
                freq = sHashTable.get(element)
                for i in range(freq):
                    result += element
                sHashTable[element] = 0
        return result
