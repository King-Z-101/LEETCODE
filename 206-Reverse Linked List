# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head is None:
            return None
        else:
            '''
            gameplan: Use a Stack since it is LIFO
            1. create a new Listnode by passing in the popped nodes from the stack (make sure to override the next values of each node)
            '''
            Stack = []
            while head:
                Stack.append(head.val)
                head = head.next
            #stack has been populated, now time to create a new ListNode object with the values in Stack
            head = Stack.pop()
            if Stack:
                currentNode = ListNode(Stack.pop())
                reverseList = ListNode(head, currentNode)
            else:
                 reverseList = ListNode(head)
            while Stack: #while there is something in the stack
                    currentNode.next = ListNode(Stack.pop())
                    currentNode = currentNode.next

            return reverseList
