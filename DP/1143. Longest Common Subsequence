class Solution:
    def traceback(self, dp, text1, text2, i, j, res):
        if i == 0 or j == 0:
            return res[::-1]
        if text1[i - 1] == text2[j - 1]:
            res += text1[i - 1]
            return self.traceback(dp, text1, text2, i - 1, j - 1, res)
        if  dp[i][j - 1] > dp[i - 1][j]:
            return self.traceback(dp, text1, text2, i, j - 1, res)
        return self.traceback(dp, text1, text2, i - 1, j, res)


    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        n, m = len(text1), len(text2)
        dp = []
        res = ""
        for i in range(n + 1):
            row = []
            for j in range(m + 1):
                row.append(0)
            dp.append(row)
        for i in range(1, n + 1):
            for j in range(1, m + 1):
                if text1[i - 1] == text2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
        word = self.traceback(dp, text1, text2, n, m, res)
        print(word)
        return dp[n][m]
