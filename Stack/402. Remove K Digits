class Solution:
    def removeKdigits(self, num: str, k: int) -> str:
        numStack = []
        
        # Construct a monotone increasing sequence of digits
        for digit in num:
            while k and numStack and numStack[-1] > digit:
                numStack.pop()
                k -= 1
        
            numStack.append(digit)
        
        # - Trunk the remaining K digits at the end
        # - in the case k==0: return the entire list
        finalStack = numStack[:-k] if k else numStack
        
        # trip the leading zeros

        return "".join(finalStack).lstrip('0') or "0" #if finalstack empty ret "0"

'''
note:
1<= k <= len(num)
order matteers
Intuition:
Stack [LiFo]
Approach:
[1219]
[0200]
[0]
Time:
o(n)
remove k digit = stack (monotomic)
sub num = stack (used to determine what to determine)
'''
        
