class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:

        intervals.sort(key=lambda x: x[0])

        merged = []
        for interval in intervals:
            # if the list of merged intervals is empty or if the current
            # interval does not overlap with the previous, simply append it.
            if not merged or merged[-1][1] < interval[0]:
                merged.append(interval)
            else:
            # otherwise, there is overlap, so we merge the current and previous
            # intervals.
                merged[-1][1] = max(merged[-1][1], interval[1])

        return merged
'''
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        if len(intervals) == 1:
            return intervals
        # intevals > 1
        intervalSize = len(intervals)
        i = 1
        while i < intervalSize:
            if ((intervals[i][0] in range(intervals[i-1][0], intervals[i-1][1] + 1)) or (intervals[i][1] in range(intervals[i-1][0], intervals[i-1][1] + 1))) or ((intervals[i-1][0] in range(intervals[i][0], intervals[i][1] + 1)) or (intervals[i-1][1] in range(intervals[i][0], intervals[i][1] + 1))):
                if intervals[i][0] <= intervals[i-1][1]:
                    if intervals[i][0] < intervals[i-1][0]:
                        leftEdge = intervals[i][0]
                        #intervals[i] = [intervals[i][0], intervals[i][1]]
                    else:
                        leftEdge = intervals[i-1][0]
                    if intervals[i-1][1] > intervals[i][1]:
                        rightEdge = intervals[i-1][1]
                    else:
                        rightEdge = intervals[i][1]
                    
                    intervals[i] = [leftEdge, rightEdge]
                    intervals = intervals[i:]
                    intervalSize = len(intervals)
                    continue
            i += 1
        return intervals
'''
        
